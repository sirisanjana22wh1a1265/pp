# -*- coding: utf-8 -*-
"""python project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUFDWeRX_sNlEAJFOCC4VDkaBQ1ILgRS
"""

import tkinter as tk
from tkinter import messagebox

class Hotel:
    def _init_(self, name, location, ranking):
        self.name = name
        self.location = location
        self.ranking = ranking
        self.rooms = []

class Room:
    def _init_(self, room_number, room_type, price_per_night):
        self.room_number = room_number
        self.room_type = room_type
        self.price_per_night = price_per_night
        self.is_reserved = False

class HotelBookingApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Hotel Booking System")

        self.hotels = self.load_sample_data()  # Load sample hotel data

        self.label = tk.Label(root, text="Welcome to Hotel Booking System")
        self.label.pack()

        self.hotel_listbox = tk.Listbox(root, selectmode=tk.SINGLE)
        for hotel in self.hotels:
            self.hotel_listbox.insert(tk.END, hotel.name)
        self.hotel_listbox.pack()

        self.book_button = tk.Button(root, text="Book Room", command=self.book_room)
        self.book_button.pack()

    def load_sample_data(self):
        hotels = []
        for i in range(15):
            hotel = Hotel(f"Hotel {i + 1}", f"Location {i + 1}", 4)
            room1 = Room(101, "Standard", 100)
            room2 = Room(102, "Deluxe", 150)
            hotel.rooms = [room1, room2]
            hotels.append(hotel)
        return hotels

    def book_room(self):
        selected_index = self.hotel_listbox.curselection()
        if selected_index:
            selected_hotel = self.hotels[selected_index[0]]
            self.show_room_selection(selected_hotel)
        else:
            messagebox.showinfo("Error", "Please select a hotel to proceed.")

    def show_room_selection(self, hotel):
        room_selection_window = tk.Toplevel(self.root)
        room_selection_window.title(f"Room Selection - {hotel.name}")

        room_label = tk.Label(room_selection_window, text=f"Available Rooms in {hotel.name}")
        room_label.pack()

        for room in hotel.rooms:
            room_button = tk.Button(
                room_selection_window,
                text=f"Room {room.room_number} - {room.room_type} (${room.price_per_night})",
                command=lambda r=room: self.confirm_booking(hotel, r)
            )
            room_button.pack()

    def confirm_booking(self, hotel, room):
        confirmation = messagebox.askyesno(
            "Confirm Booking",
            f"Do you want to book Room {room.room_number} in {hotel.name} for ${room.price_per_night} per night?"
        )
        if confirmation:
            room.is_reserved = True
            messagebox.showinfo("Booking Confirmed", "Room booked successfully!")
        else:
            messagebox.showinfo("Booking Cancelled", "Room booking cancelled.")

if _name_ == "_main_":
    root = tk.Tk()
    app = HotelBookingApp(root)
    root.mainloop()